{"ast":null,"code":"const BASE_URL = '\"https://register.nomoreparties.co\";';\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(data => {\n    if (data.ok) {\n      return data.json();\n    }\n    return Promise.reject(`Error: ${data.status}`);\n  }).catch(err => console.error('Error:', err));\n};\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`); // Maneja el error si la respuesta no es OK\n    }\n    const data = await response.json(); // Espera a obtener los datos en formato JSON\n    return data; // Retorna los datos obtenidos\n  } catch (err) {\n    console.error('Error:', err); // Muestra el error si ocurre\n    throw err; // Lanza el error para que pueda ser manejado en otro lugar si es necesario\n  }\n};\nexport const getUserToken = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('Error:', err);\n    throw err;\n  }\n};","map":{"version":3,"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","data","ok","json","Promise","reject","status","catch","err","console","error","login","response","Error","getUserToken","token","Accept","Authorization"],"sources":["/Users/gabriel/Documents/Proyectos-TripleTen/Proyecto6/web_project_around_auth/src/utils/auth.js"],"sourcesContent":["const BASE_URL = '\"https://register.nomoreparties.co\";';\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password }),\n  })\n    .then((data) => {\n      if (data.ok) {\n        return data.json();\n      }\n      return Promise.reject(`Error: ${data.status}`);\n    })\n    .catch((err) => console.error('Error:', err));\n};\n\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signin`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`); // Maneja el error si la respuesta no es OK\n    }\n\n    const data = await response.json(); // Espera a obtener los datos en formato JSON\n    return data; // Retorna los datos obtenidos\n  } catch (err) {\n    console.error('Error:', err); // Muestra el error si ocurre\n    throw err; // Lanza el error para que pueda ser manejado en otro lugar si es necesario\n  }\n};\n\nexport const getUserToken = async (token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('Error:', err);\n    throw err;\n  }\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,sCAAsC;AAEvD,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOC,KAAK,CAAC,GAAGJ,QAAQ,SAAS,EAAE;IACjCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACCO,IAAI,CAAEC,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,EAAE,EAAE;MACX,OAAOD,IAAI,CAACE,IAAI,CAAC,CAAC;IACpB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAC,UAAUJ,IAAI,CAACK,MAAM,EAAE,CAAC;EAChD,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEF,GAAG,CAAC,CAAC;AACjD,CAAC;AAED,OAAO,MAAMG,KAAK,GAAG,MAAAA,CAAOnB,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMmB,QAAQ,GAAG,MAAMlB,KAAK,CAAC,GAAGJ,QAAQ,SAAS,EAAE;MACjDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAI,CAACmB,QAAQ,CAACV,EAAE,EAAE;MAChB,MAAM,IAAIW,KAAK,CAAC,UAAUD,QAAQ,CAACN,MAAM,EAAE,CAAC,CAAC,CAAC;IAChD;IAEA,MAAML,IAAI,GAAG,MAAMW,QAAQ,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,OAAOF,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEF,GAAG,CAAC,CAAC,CAAC;IAC9B,MAAMA,GAAG,CAAC,CAAC;EACb;AACF,CAAC;AAED,OAAO,MAAMM,YAAY,GAAG,MAAOC,KAAK,IAAK;EAC3C,IAAI;IACF,MAAMH,QAAQ,GAAG,MAAMlB,KAAK,CAAC,GAAGJ,QAAQ,WAAW,EAAE;MACnDK,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPoB,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUF,KAAK;MAChC;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACV,EAAE,EAAE;MAChB,MAAM,IAAIW,KAAK,CAAC,UAAUD,QAAQ,CAACN,MAAM,EAAE,CAAC;IAC9C;IAEA,MAAML,IAAI,GAAG,MAAMW,QAAQ,CAACT,IAAI,CAAC,CAAC;IAClC,OAAOF,IAAI;EACb,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEF,GAAG,CAAC;IAC5B,MAAMA,GAAG;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}