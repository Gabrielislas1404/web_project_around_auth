{"ast":null,"code":"export const BASE_URL = 'https://tripleten.desarrollointerno.com';\nexport const register = async (email, password) => {\n  if (!email || !password) {\n    throw new Error('Email and password must be provided.');\n  }\n  try {\n    const response = await fetch(`${BASE_URL}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('Error:', err);\n    throw err;\n  }\n};\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('Error:', err);\n    throw err;\n  }\n};\nexport const getUserToken = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('Error:', err);\n    throw err;\n  }\n};","map":{"version":3,"names":["BASE_URL","register","email","password","Error","response","fetch","method","headers","body","JSON","stringify","ok","status","data","json","err","console","error","login","getUserToken","token","Accept","Authorization"],"sources":["/Users/gabriel/Documents/Proyectos-TripleTen/Proyecto6/web_project_around_auth/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'https://tripleten.desarrollointerno.com';\n\nexport const register = async (email, password) => {\n  if (!email || !password) {\n    throw new Error('Email and password must be provided.');\n  }\n  try {\n    const response = await fetch(`${BASE_URL}/signup`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('Error:', err);\n    throw err;\n  }\n};\n\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signin`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('Error:', err);\n    throw err;\n  }\n};\n\nexport const getUserToken = async (token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('Error:', err);\n    throw err;\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,yCAAyC;AAEjE,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACjD,IAAI,CAACD,KAAK,IAAI,CAACC,QAAQ,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACzD;EACA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,SAAS,EAAE;MACjDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIR,KAAK,CAAC,UAAUC,QAAQ,CAACQ,MAAM,EAAE,CAAC;IAC9C;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEF,GAAG,CAAC;IAC5B,MAAMA,GAAG;EACX;AACF,CAAC;AAED,OAAO,MAAMG,KAAK,GAAG,MAAAA,CAAOjB,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,SAAS,EAAE;MACjDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIR,KAAK,CAAC,UAAUC,QAAQ,CAACQ,MAAM,EAAE,CAAC;IAC9C;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEF,GAAG,CAAC;IAC5B,MAAMA,GAAG;EACX;AACF,CAAC;AAED,OAAO,MAAMI,YAAY,GAAG,MAAOC,KAAK,IAAK;EAC3C,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,WAAW,EAAE;MACnDO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPc,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUF,KAAK;MAChC;IACF,CAAC,CAAC;IAEF,IAAI,CAAChB,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIR,KAAK,CAAC,UAAUC,QAAQ,CAACQ,MAAM,EAAE,CAAC;IAC9C;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEF,GAAG,CAAC;IAC5B,MAAMA,GAAG;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}